knitr::opts_chunk$set(echo = TRUE)
newPackages <- packages[ !(packages %in% installed.packages()[, "Package"])]
knitr::opts_chunk$set(echo = TRUE)
packages <- c( "dplyr",     "stringr",    "readxl",
"haven",     "readr",      "knitr",
"kableExtra", "DT")
newPackages <- packages[ !(packages %in% installed.packages()[, "Package"])]
if(length(newPackages)) install.packages(newPackages)
for (paquete in packages) {
suppressMessages(library(paquete, character.only = TRUE))
}
rm(list = ls()) # Clean object
wd_inicial <- "../"
carpeta_descarga <- "./download"
archivo_descarga <- "download.zip"
archivo_entrega <- "resultado.txt"
# url del archivo .zip que contiene la informacion
url_zip <- "https://github.com/gforconi/maestria_ciencia_de_datos/blob/main/Analisis%20Inteligente%20de%20Datos/TP%201/datos_charly2.zip?raw=true"
#Generamos path
temp <- paste(getwd(),archivo_descarga, sep = "/")
#Descargamos archivo
download.file(url_zip,temp, mode='wb')
#Descomprimimos
unzip(zipfile = archivo_descarga, unzip = "internal", exdir = carpeta_descarga)
# Borramos objetos que no vamos a necesitar
rm(url_zip, temp)
# Seteamos WD
knitr::opts_knit$set(root.dir = carpeta_descarga)
### Archivo .SAS7DBAT
Cargamos archivo con extensión .sas7bdat
### Archivo .SAS7DBAT
Cargamos archivo con extensión .sas7bdat
library(readr)
resultado_2_ <- read_delim("C:/Users/CarlaMoreyra/Downloads/resultado (2).txt",
delim = "\t", escape_double = FALSE,
locale = locale(decimal_mark = ",", grouping_mark = ""),
trim_ws = TRUE)
View(resultado_2_)
min(resultado_2_$instrumentalness)
max(resultado_2_$instrumentalness)
knitr::opts_chunk$set(echo = TRUE)
packages <- c( "dplyr",     "stringr",    "readxl",
"haven",     "readr",      "knitr",
"kableExtra", "DT")
newPackages <- packages[ !(packages %in% installed.packages()[, "Package"])]
if(length(newPackages)) install.packages(newPackages)
for (paquete in packages) {
suppressMessages(library(paquete, character.only = TRUE))
}
rm(list = ls()) # Clean object
wd_inicial <- "../"
carpeta_descarga <- "./download"
archivo_descarga <- "download.zip"
archivo_entrega <- "resultado.txt"
# url del archivo .zip que contiene la informacion
url_zip <- "https://github.com/gforconi/maestria_ciencia_de_datos/blob/main/Analisis%20Inteligente%20de%20Datos/TP%201/datos_charly2.zip?raw=true"
#Generamos path
temp <- paste(getwd(),archivo_descarga, sep = "/")
#Descargamos archivo
download.file(url_zip,temp, mode='wb')
#Descomprimimos
unzip(zipfile = archivo_descarga, unzip = "internal", exdir = carpeta_descarga)
# Borramos objetos que no vamos a necesitar
rm(url_zip, temp)
# Seteamos WD
knitr::opts_knit$set(root.dir = carpeta_descarga)
df_bbatj <- read_sas("bbatj.sas7bdat", NULL)
datatable(data = df_bbatj, filter = "top", options = list(scrollX = TRUE))
df_albums <- read_excel("albums.xlsx")
datatable(data = df_albums, filter = "top", options = list(scrollX = TRUE))
df_serugiran <- read_excel("serugiran.xlsx")
datatable(data = df_serugiran, filter = "top", options = list(scrollX = TRUE))
#Cambiamos formato de las columnas de cientifico a numeric
df_serugiran$acusticidad <- as.numeric(format(df_serugiran$acusticidad, scientific = FALSE))
#df_serugiran cambiar nombre de las columnas
colnames(df_serugiran) <- colnames(df_bbatj)
datatable(data = df_serugiran, filter = "top", options = list(scrollX = TRUE))
df_suigeneris <- read_delim(file = "suigeneris.csv",
delim = ",",
show_col_types = FALSE)
datatable(data = df_suigeneris, filter = "top", options = list(scrollX = TRUE))
for (line in 1:nrow(df_suigeneris)){
if(df_suigeneris[line,2] == 1){
id <- df_suigeneris[line,3] #album_id
name <- df_suigeneris[line,4] #line$album_name
}else {
df_suigeneris[line,3] <- id
df_suigeneris[line,4] <- name
}
}
datatable(data = df_suigeneris, filter = "top", options = list(scrollX = TRUE))
library(devtools)
#install_github("tiagomendesdantas/Rspotify")
library(Rspotify)
library(devtools)
install_github("tiagomendesdantas/Rspotify")
library(Rspotify)
library(dplyr)
keys <- spotifyOAuth("031ae484190847cf8267f775248ae42f",
"031ae484190847cf8267f775248ae42f",
"2df61022fa0b48ad83f4c1921133d155")
my_oauth <- spotifyOAuth(app_id="031ae484190847cf8267f775248ae42f",
client_id="031ae484190847cf8267f775248ae42f",
client_secret="2df61022fa0b48ad83f4c1921133d155")
#lectura2 <- as.data.frame(getAlbum("5XBgXYEw2flQFZDW1I8lFS",token=keys))
lista <- df_suigeneris[!is.na(df_suigeneris$album_id),]$album_id
primer_paso <- TRUE
for (album_id in lista) {
lectura <- getAlbum(album_id,token=keys)[,c("id", "track_number", "disc_number")]
lectura["album_id"]<-album_id
if (primer_paso) {
df <- lectura
primer_paso <- FALSE
} else {
df <- union_all(df,lectura)
}
print(paste("procesando:", album_id))
}
library(devtools)
install_github("tiagomendesdantas/Rspotify")
library(Rspotify)
library(dplyr)
keys <- spotifyOAuth("031ae484190847cf8267f775248ae42f",
"031ae484190847cf8267f775248ae42f",
"2df61022fa0b48ad83f4c1921133d155")
my_oauth <- spotifyOAuth(app_id="031ae484190847cf8267f775248ae42f",
client_id="031ae484190847cf8267f775248ae42f",
client_secret="2df61022fa0b48ad83f4c1921133d155")
#lectura2 <- as.data.frame(getAlbum("5XBgXYEw2flQFZDW1I8lFS",token=keys))
lista <- df_suigeneris[!is.na(df_suigeneris$album_id),]$album_id
primer_paso <- TRUE
for (album_id in lista) {
lectura <- getAlbum(album_id,token=keys)[,c("id", "track_number", "disc_number")]
lectura["album_id"]<-album_id
if (primer_paso) {
df <- lectura
primer_paso <- FALSE
} else {
df <- union_all(df,lectura)
}
print(paste("procesando:", album_id))
}
library(devtools)
install_github("tiagomendesdantas/Rspotify", force = TRUE)
library(Rspotify)
library(dplyr)
keys <- spotifyOAuth("031ae484190847cf8267f775248ae42f",
"031ae484190847cf8267f775248ae42f",
"2df61022fa0b48ad83f4c1921133d155")
my_oauth <- spotifyOAuth(app_id="031ae484190847cf8267f775248ae42f",
client_id="031ae484190847cf8267f775248ae42f",
client_secret="2df61022fa0b48ad83f4c1921133d155")
#lectura2 <- as.data.frame(getAlbum("5XBgXYEw2flQFZDW1I8lFS",token=keys))
lista <- df_suigeneris[!is.na(df_suigeneris$album_id),]$album_id
primer_paso <- TRUE
for (album_id in lista) {
lectura <- getAlbum(album_id,token=keys)[,c("id", "track_number", "disc_number")]
lectura["album_id"]<-album_id
if (primer_paso) {
df <- lectura
primer_paso <- FALSE
} else {
df <- union_all(df,lectura)
}
print(paste("procesando:", album_id))
}
df_suigeneris["disc_number"] <- 1
df_suigeneris$disc_number[df_suigeneris$album_id == "7hnjaxu9GjMBJCQd9F5xvn"] <- 2
datatable(data = df_suigeneris, filter = "top", options = list(scrollX = TRUE))
df_porsuigieco <- read_delim(
file = "porsuigieco.txt",
delim = "|",
show_col_types = FALSE
)
datatable(data = df_porsuigieco, filter = "top", options = list(scrollX = TRUE))
proceso_solista <- function(archivos)
{
primer_paso <- TRUE
for (file in archivos) {
lectura <- read_delim(
file = file,
delim = "\t",
show_col_types = FALSE #Silencia mensaje de consola
)
if (primer_paso) {
df <- lectura
primer_paso <- FALSE
} else {
df <- union_all(df,lectura)
}
#print(paste("procesando:", file)) #Muestra el archivo que vamos procesando
}
return(df)
}
proceso_maquina_pajaros <- function(df_parametros)
{
primer_paso <- TRUE
for (df_row in 1:nrow(df_parametros)) {
lectura <- readr::read_delim(
file = df_parametros[df_row,1],
col_names = FALSE,
delim = ":",
trim_ws = TRUE, #Quita espacios en blancos en inicio y fin.
show_col_types = FALSE #Silencia mensaje de consola
)
lectura_t <- data.frame(t(lectura)) #Trasnponemos y conviertimos en Data Frame
colnames(lectura_t) <- lectura_t[1,] #Llevamos primera fila a nombre de columnas
lectura_t <- lectura_t[- 1, ] #Borramos primera fila con nombre de columnas
#Agregamos nombre del album e id
lectura_t["album_name"] <- df_parametros[df_row,2]
lectura_t["album_id"] <- df_parametros[df_row,3]
lectura_t["album_artist"] <- df_parametros[df_row,3]
lectura_t["uri"] <- paste("spotify:track:", lectura_t["id"], sep = "")
lectura_t["analysis_url"] <- paste("https://api.spotify.com/v1/audio-analysis/", lectura_t["id"], sep = "")
if (primer_paso) {
df <- lectura_t
primer_paso <- FALSE
} else {
df <- union_all(df,lectura_t)
}
# print(paste("procesando:", df_parametros[df_row,1])) #Muestra el archivo que vamos procesando
}
df <- select(df, name, id, album_name, album_id, album_artist, uri, analysis_url, everything())
df[,8:ncol(df)] <- sapply(df[,8:ncol(df)], as.numeric) #Tranformamos a numeric las columnas
return(df)
}
path = "./solista"
archivos <- list.files(path = path, recursive = T, include.dirs=TRUE)
archivos <- paste(path,archivos[], sep = "/")
df_solista <- proceso_solista(archivos)
# Cargo archivos lmdhp ----
path = "./lmdhp"
archivos <- list.files(path = path, recursive = T)
archivos <- data.frame(archivos)
df_parametros <- archivos %>%
mutate(col1 = str_split(#Buscamos el caracter / para dividir el path y nos quedamos con el primer corte
string = archivos,
pattern = "/",
simplify = TRUE,
#n = 2
)[,1]
,
col2 = str_split( #Buscamos el string "album_" para dividir el path y nos quedamos con el primer segundo corte. Otra forma de hacer esto es un reemplace de "album_" por un vacio "".
string = col1,
pattern = "album_",
simplify = TRUE
)[,2],
col3 = str_replace_all( #Reemplazamos _ por espacios
string = col2,
pattern = "_",
replacement = " "
),
col4 = str_replace_all( #Reemplazamos pajaros por pájaros para que coincidan los string.
string = col3,
pattern = "pajaros",
replacement = "pájaros"
),
col5 = str_replace_all(#Reemplazamos maquina por máquina para que coincidan los string.
string = col4,
pattern = "maquina",
replacement = "máquina"
),
album_name = str_to_title(col5), #Convertimos primera letra y letras despues de los espacios en mayusculas
fullPath = paste(path,archivos, sep = "/")) %>% #Agregamos al path la carpeta donde estamos buscando
left_join(df_albums, by = c("album_name" = "name")) %>%
select(fullPath,album_name,id, artist)
path = "./solista"
archivos <- list.files(path = path, recursive = T, include.dirs=TRUE)
archivos <- paste(path,archivos[], sep = "/")
df_solista <- proceso_solista(archivos)
path = "./solista"
archivos <- list.files(path = path, recursive = T, include.dirs=TRUE)
archivos <- paste(path,archivos[], sep = "/")
df_solista <- proceso_solista(archivos)
datatable(data = df_solista, filter = "top", options = list(scrollX = TRUE))
# Cargo archivos lmdhp ----
path = "./lmdhp"
archivos <- list.files(path = path, recursive = T)
archivos <- data.frame(archivos)
df_parametros <- archivos %>%
mutate(col1 = str_split(#Buscamos el caracter / para dividir el path y nos quedamos con el primer corte
string = archivos,
pattern = "/",
simplify = TRUE,
#n = 2
)[,1]
,
col2 = str_split( #Buscamos el string "album_" para dividir el path y nos quedamos con el primer segundo corte. Otra forma de hacer esto es un reemplace de "album_" por un vacio "".
string = col1,
pattern = "album_",
simplify = TRUE
)[,2],
col3 = str_replace_all( #Reemplazamos _ por espacios
string = col2,
pattern = "_",
replacement = " "
),
col4 = str_replace_all( #Reemplazamos pajaros por pájaros para que coincidan los string.
string = col3,
pattern = "pajaros",
replacement = "pájaros"
),
col5 = str_replace_all(#Reemplazamos maquina por máquina para que coincidan los string.
string = col4,
pattern = "maquina",
replacement = "máquina"
),
album_name = str_to_title(col5), #Convertimos primera letra y letras despues de los espacios en mayusculas
fullPath = paste(path,archivos, sep = "/")) %>% #Agregamos al path la carpeta donde estamos buscando
left_join(df_albums, by = c("album_name" = "name")) %>%
select(fullPath,album_name,id, artist)
datatable(data = df_parametros, filter = "top", options = list(scrollX = TRUE))
df_lmdhp <- proceso_maquina_pajaros(df_parametros)
datatable(data = df_lmdhp, filter = "top", options = list(scrollX = TRUE))
df_lmdhp["disc_number"] <- 1
datatable(data = df_lmdhp, filter = "top", options = list(scrollX = TRUE))
knitr::opts_knit$set(root.dir = "./")
knitr::opts_knit$set(root.dir = "./")
unlink("./download", recursive = TRUE)
unlink("./download.zip", recursive = TRUE)
df_union <- union_all(df_solista,df_lmdhp)
df_union <- union_all(df_union,df_porsuigieco)
df_union <- union_all(df_union,df_bbatj)
df_union <- union_all(df_union,df_serugiran)
df_union <- union_all(df_union,df_suigeneris)
datatable(data = df_union, filter = "top", options = list(scrollX = TRUE))
df_aux <- left_join(df_union[ , c("album_id")],
df_albums[ , c("id", "artist")],
by = c("album_id" = "id"),
all.output=TRUE
)%>% select(artist)
df_union$album_artist <-  df_aux$artist
rm(df_aux)
datatable(data = df_union, filter = "top", options = list(scrollX = TRUE))
df_union$instrumentalness <- as.numeric(format(df_union$instrumentalness, scientific = FALSE))
datatable(data = df_union, filter = "top", options = list(scrollX = TRUE))
rownames(df_union) <- NULL #reseteo los indices de fila
write.table(df_union,
file = archivo_entrega,
sep = "\t",
dec = ".",
row.names = FALSE,
col.names = TRUE,
quote = FALSE)
library(readr)
resultado <- read_delim("resultado.txt",
delim = "\t", escape_double = FALSE,
locale = locale(decimal_mark = ",", grouping_mark = ""),
trim_ws = TRUE)
View(resultado)
#prueba
max(df_union$instrumentalness)
View(df_union)
#prueba
max(df_union$instrumentalness)
min(df_union$instrumentalness)
View(df_union)
resultado <- read_delim("resultado.txt",
delim = "\t", escape_double = FALSE,
locale = locale(decimal_mark = ",", grouping_mark = ""),
trim_ws = TRUE)
View(resultado)
